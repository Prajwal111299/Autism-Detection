# -*- coding: utf-8 -*-
"""Autism_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n-iLF1rdCvOz1SNZilHv1JoQf9CjFIca
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

df = pd.read_csv("/content/autism_screening.csv")
df.head()

df.shape

df.info()

df.isnull().sum()

df = df.dropna()

df["ethnicity"].value_counts()

df["ethnicity"] = df["ethnicity"].str.replace("others", "Others")
df["ethnicity"] = df["ethnicity"].str.replace("?", "Others")

df["jundice"] = df["jundice"].map({"no": 0, "yes": 1})
df["austim"] = df["austim"].map({"no": 0, "yes": 1})
df["used_app_before"] = df["used_app_before"].map({"no": 0, "yes": 1})
df["gender"] = df["gender"].map({"f": 0, "m": 1})

df["Class/ASD"] = df["Class/ASD"].map({"NO": 0, "YES": 1})

df["relation"] = df["relation"].str.replace("?", "Others")

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(15, 5))
sns.countplot(x=df["ethnicity"])
plt.show()

plt.figure(figsize=(16, 12))
sns.countplot(x=df["gender"], hue=df["Class/ASD"])
plt.show()

from sklearn.preprocessing import LabelEncoder

def label_encoder(column):
    le = LabelEncoder().fit(column)
    print(column.name, le.classes_)
    return le.transform(column)

df["ethnicity"] = label_encoder(df["ethnicity"])

df["relation"] = label_encoder(df["relation"])

ndf = df.drop(["contry_of_res", "age_desc"], axis=1)

ndf["age"] = ndf["age"].astype("int64")
ndf["result"] = ndf["result"].astype("int64")

plt.figure(figsize=(10, 10))
sns.heatmap(ndf.corr() > 0.8, annot=True, cbar=False)
plt.show()

X = ndf.drop(["Class/ASD"], axis=1)
y = ndf["Class/ASD"]

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import r2_score

logreg = LogisticRegression()
logreg.fit(X_train, y_train)
y_pred_logreg = logreg.predict(X_test)
r2_score(y_test, y_pred_logreg)

from xgboost import XGBClassifier

xgb = XGBClassifier()
xgb.fit(X_train, y_train)
y_pred_xgb = xgb.predict(X_test)
r2_score(y_test, y_pred_xgb)

from sklearn.svm import SVC

svc = SVC()
svc.fit(X_train, y_train)
y_pred_svc = svc.predict(X_test)
r2_score(y_test, y_pred_svc)

test = np.array([[1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 32, 1, 9, 0, 0, 0, 6, 4]])
logreg.predict(test), xgb.predict(test), svc.predict(test)